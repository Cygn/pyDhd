# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pyDhd
else:
    import _pyDhd

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def dhdGetDeviceAngleRad(ID=-1):
    return _pyDhd.dhdGetDeviceAngleRad(ID)

def dhdGetDeviceAngleDeg(ID=-1):
    return _pyDhd.dhdGetDeviceAngleDeg(ID)

def dhdGetEffectorMass(ID=-1):
    return _pyDhd.dhdGetEffectorMass(ID)

def dhdGetPosition(ID=-1):
    return _pyDhd.dhdGetPosition(ID)

def dhdGetForce(ID=-1):
    return _pyDhd.dhdGetForce(ID)

def dhdGetOrientationRad(ID=-1):
    return _pyDhd.dhdGetOrientationRad(ID)

def dhdGetOrientationDeg(ID=-1):
    return _pyDhd.dhdGetOrientationDeg(ID)

def dhdGetPositionAndOrientationRad(ID=-1):
    return _pyDhd.dhdGetPositionAndOrientationRad(ID)

def dhdGetPositionAndOrientationDeg(ID=-1):
    return _pyDhd.dhdGetPositionAndOrientationDeg(ID)

def dhdGetPositionAndOrientationFrame(matrix, ID=-1):
    return _pyDhd.dhdGetPositionAndOrientationFrame(matrix, ID)

def dhdGetForceAndTorque(ID=-1):
    return _pyDhd.dhdGetForceAndTorque(ID)

def dhdGetGripperAngleDeg(ID=-1):
    return _pyDhd.dhdGetGripperAngleDeg(ID)

def dhdGetGripperAngleRad(ID=-1):
    return _pyDhd.dhdGetGripperAngleRad(ID)

def dhdGetGripperGap(ID=-1):
    return _pyDhd.dhdGetGripperGap(ID)

def dhdGetGripperThumbPos(ID=-1):
    return _pyDhd.dhdGetGripperThumbPos(ID)

def dhdGetGripperFingerPos(ID=-1):
    return _pyDhd.dhdGetGripperFingerPos(ID)

def dhdGetForceAndTorqueAndGripperForce(ID=-1):
    return _pyDhd.dhdGetForceAndTorqueAndGripperForce(ID)

def dhdGetLinearVelocity(ID=-1):
    return _pyDhd.dhdGetLinearVelocity(ID)

def dhdGetAngularVelocityRad(ID=-1):
    return _pyDhd.dhdGetAngularVelocityRad(ID)

def dhdGetAngularVelocityDeg(ID=-1):
    return _pyDhd.dhdGetAngularVelocityDeg(ID)

def dhdGetGripperLinearVelocity(ID=-1):
    return _pyDhd.dhdGetGripperLinearVelocity(ID)

def dhdGetGripperAngularVelocityRad(ID=-1):
    return _pyDhd.dhdGetGripperAngularVelocityRad(ID)

def dhdGetGripperAngularVelocityDeg(ID=-1):
    return _pyDhd.dhdGetGripperAngularVelocityDeg(ID)

def dhdGetBaseAngleXRad(ID=-1):
    return _pyDhd.dhdGetBaseAngleXRad(ID)

def dhdGetBaseAngleXDeg(ID=-1):
    return _pyDhd.dhdGetBaseAngleXDeg(ID)

def dhdGetBaseAngleZRad(ID=-1):
    return _pyDhd.dhdGetBaseAngleZRad(ID)

def dhdGetBaseAngleZDeg(ID=-1):
    return _pyDhd.dhdGetBaseAngleZDeg(ID)

def dhdGetDeviceCount():
    return _pyDhd.dhdGetDeviceCount()

def dhdGetAvailableCount():
    return _pyDhd.dhdGetAvailableCount()

def dhdSetDevice(ID):
    return _pyDhd.dhdSetDevice(ID)

def dhdGetDeviceID():
    return _pyDhd.dhdGetDeviceID()

def dhdGetSerialNumber(sn, ID=-1):
    return _pyDhd.dhdGetSerialNumber(sn, ID)

def dhdOpen():
    return _pyDhd.dhdOpen()

def dhdOpenType(type):
    return _pyDhd.dhdOpenType(type)

def dhdOpenSerial(serial):
    return _pyDhd.dhdOpenSerial(serial)

def dhdOpenID(ID):
    return _pyDhd.dhdOpenID(ID)

def dhdClose(ID=-1):
    return _pyDhd.dhdClose(ID)

def dhdStop(ID=-1):
    return _pyDhd.dhdStop(ID)

def dhdGetComMode(ID=-1):
    return _pyDhd.dhdGetComMode(ID)

def dhdEnableForce(val, ID=-1):
    return _pyDhd.dhdEnableForce(val, ID)

def dhdGetSystemType(ID=-1):
    return _pyDhd.dhdGetSystemType(ID)

def dhdGetSystemName(ID=-1):
    return _pyDhd.dhdGetSystemName(ID)

def dhdGetVersion(ver, ID=-1):
    return _pyDhd.dhdGetVersion(ver, ID)

def dhdGetSDKVersion(major, minor, release, revision):
    return _pyDhd.dhdGetSDKVersion(major, minor, release, revision)

def dhdGetSystemCounter():
    return _pyDhd.dhdGetSystemCounter()

def dhdGetButton(index, ID=-1):
    return _pyDhd.dhdGetButton(index, ID)

def dhdGetButtonMask(ID=-1):
    return _pyDhd.dhdGetButtonMask(ID)

def dhdSetOutput(output, ID=-1):
    return _pyDhd.dhdSetOutput(output, ID)

def dhdIsLeftHanded(ID=-1):
    return _pyDhd.dhdIsLeftHanded(ID)

def dhdHasWrist(ID=-1):
    return _pyDhd.dhdHasWrist(ID)

def dhdHasActiveWrist(ID=-1):
    return _pyDhd.dhdHasActiveWrist(ID)

def dhdHasGripper(ID=-1):
    return _pyDhd.dhdHasGripper(ID)

def dhdReset(ID=-1):
    return _pyDhd.dhdReset(ID)

def dhdResetWrist(ID=-1):
    return _pyDhd.dhdResetWrist(ID)

def dhdWaitForReset(timeout=0, ID=-1):
    return _pyDhd.dhdWaitForReset(timeout, ID)

def dhdSetStandardGravity(g, ID=-1):
    return _pyDhd.dhdSetStandardGravity(g, ID)

def dhdSetGravityCompensation(*args):
    return _pyDhd.dhdSetGravityCompensation(*args)

def dhdSetBrakes(*args):
    return _pyDhd.dhdSetBrakes(*args)

def dhdSetDeviceAngleRad(angle, ID=-1):
    return _pyDhd.dhdSetDeviceAngleRad(angle, ID)

def dhdSetDeviceAngleDeg(angle, ID=-1):
    return _pyDhd.dhdSetDeviceAngleDeg(angle, ID)

def dhdSetEffectorMass(mass, ID=-1):
    return _pyDhd.dhdSetEffectorMass(mass, ID)

def dhdSetForce(fx, fy, fz, ID=-1):
    return _pyDhd.dhdSetForce(fx, fy, fz, ID)

def dhdSetForceAndTorque(fx, fy, fz, ta, tb, tg, ID=-1):
    return _pyDhd.dhdSetForceAndTorque(fx, fy, fz, ta, tb, tg, ID)

def dhdGetComFreq(ID=-1):
    return _pyDhd.dhdGetComFreq(ID)

def dhdSetForceAndGripperForce(fx, fy, fz, f, ID=-1):
    return _pyDhd.dhdSetForceAndGripperForce(fx, fy, fz, f, ID)

def dhdSetForceAndTorqueAndGripperForce(fx, fy, fz, ta, tb, tg, f, ID=-1):
    return _pyDhd.dhdSetForceAndTorqueAndGripperForce(fx, fy, fz, ta, tb, tg, f, ID)

def dhdConfigLinearVelocity(*args):
    return _pyDhd.dhdConfigLinearVelocity(*args)

def dhdConfigAngularVelocity(*args):
    return _pyDhd.dhdConfigAngularVelocity(*args)

def dhdConfigGripperVelocity(*args):
    return _pyDhd.dhdConfigGripperVelocity(*args)

def dhdEmulateButton(val, ID=-1):
    return _pyDhd.dhdEmulateButton(val, ID)

def dhdSetBaseAngleXRad(angle, ID=-1):
    return _pyDhd.dhdSetBaseAngleXRad(angle, ID)

def dhdSetBaseAngleXDeg(angle, ID=-1):
    return _pyDhd.dhdSetBaseAngleXDeg(angle, ID)

def dhdSetBaseAngleZRad(angle, ID=-1):
    return _pyDhd.dhdSetBaseAngleZRad(angle, ID)

def dhdSetBaseAngleZDeg(angle, ID=-1):
    return _pyDhd.dhdSetBaseAngleZDeg(angle, ID)

def dhdKbHit():
    return _pyDhd.dhdKbHit()

def dhdKbGet():
    return _pyDhd.dhdKbGet()

def dhdGetTime():
    return _pyDhd.dhdGetTime()

def dhdSleep(sec):
    return _pyDhd.dhdSleep(sec)
DHD_ON = _pyDhd.DHD_ON
DHD_OFF = _pyDhd.DHD_OFF

